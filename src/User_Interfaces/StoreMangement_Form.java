/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package User_Interfaces;

import Data_Management.Item;
import Data_Management.Maintain_Items;
import Data_Management.Maintain_Stores;
import Data_Management.Maintain_Users;
import Data_Management.Store;
import Data_Management.User;
import SmarkShopperSystem.Smart_Shoppers_System;
import java.awt.Color;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Scanner;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author patli
 */
public class StoreMangement_Form extends javax.swing.JFrame {

    String storeName;
    String storeID;
    String userType;
    String itemName;
    String ItemID;
    
    String loginPath = "C:\\SmartShoppersSystem\\logins.csv";
    File loginFile = new File(loginPath);
    
    String storesPath = "C:\\SmartShoppersSystem\\stores.csv";
    File storesFile = new File(storesPath);
    
    String itemsPath = "C:\\SmartShoppersSystem\\items.csv";
    File itemsFile = new File(itemsPath);
    
    String originalStoreID;
    String originalStoreName;
    
    Item newItem;
    
    /**
     * Creates new form ItemManagement_Form
     */
    public StoreMangement_Form() {
        initComponents();
        this.setLocationRelativeTo(null);
        updateItemsTable();
        updateStoreTable();
    }
    
    public void getUserType(String userType){
        this.userType = userType;
    }
    
    public void getStoreNum (String storeNum){
        this.storeID = storeNum;
    }
    
    public void getStoreName(String storeName){
        this.storeName = storeName;
        storeLabel.setText("Store: " + storeName);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        storeLabel = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable_ItemsTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jTextField_ItemName = new javax.swing.JTextField();
        jTextField_ItemID = new javax.swing.JTextField();
        jTextField_ItemCategory = new javax.swing.JTextField();
        jTextField_ItemSize = new javax.swing.JTextField();
        jTextField_ItemPrice = new javax.swing.JTextField();
        jComboBox_SaleItem = new javax.swing.JComboBox<>();
        jTextField_ItemDescription = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jButton_DeleteItem = new javax.swing.JButton();
        jButton_AddItem = new javax.swing.JButton();
        jButton_UpdateItem = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jTextField_ItemAisle = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jTextField_NumOfItems = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable_StoreTable = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jButton_UpdateStore = new javax.swing.JButton();
        jComboBox_ClosingHours = new javax.swing.JComboBox<>();
        jComboBox_OpeningHours = new javax.swing.JComboBox<>();
        jTextField_ItemAvailability = new javax.swing.JTextField();
        jButton_Close = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 51, 0));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        storeLabel.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        storeLabel.setForeground(new java.awt.Color(255, 255, 255));
        storeLabel.setText("Store:");
        jPanel1.add(storeLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 410, 30));

        jPanel2.setBackground(new java.awt.Color(0, 204, 204));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable_ItemsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Item Name", "ItemID", "# of Items", "Size", "Price", "Description", "Category", "Aisle", "Sale"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable_ItemsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable_ItemsTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable_ItemsTable);

        jPanel2.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 530, 140));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Item Aisle #:");
        jPanel2.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 160, -1, -1));

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("ItemID:");
        jPanel2.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 200, -1, -1));

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Item Availability:");
        jPanel2.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 60, -1, -1));

        jLabel11.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("Description:");
        jPanel2.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 130, -1, -1));

        jLabel12.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("Size:");
        jPanel2.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 200, -1, -1));

        jLabel13.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("Price:");
        jPanel2.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 200, -1, -1));

        jTextField_ItemName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField_ItemNameActionPerformed(evt);
            }
        });
        jPanel2.add(jTextField_ItemName, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 160, 80, -1));
        jPanel2.add(jTextField_ItemID, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 200, 80, -1));
        jPanel2.add(jTextField_ItemCategory, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 160, 80, -1));
        jPanel2.add(jTextField_ItemSize, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 200, 80, -1));

        jTextField_ItemPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField_ItemPriceActionPerformed(evt);
            }
        });
        jPanel2.add(jTextField_ItemPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 200, 90, -1));

        jComboBox_SaleItem.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "Yes", "No" }));
        jPanel2.add(jComboBox_SaleItem, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 100, -1, -1));
        jPanel2.add(jTextField_ItemDescription, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 150, 230, 70));

        jLabel14.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setText("Item Name:");
        jPanel2.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 160, -1, -1));

        jButton_DeleteItem.setText("Delete");
        jButton_DeleteItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_DeleteItemActionPerformed(evt);
            }
        });
        jPanel2.add(jButton_DeleteItem, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 10, 70, 30));

        jButton_AddItem.setText("Add");
        jButton_AddItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_AddItemActionPerformed(evt);
            }
        });
        jPanel2.add(jButton_AddItem, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 10, 70, 30));

        jButton_UpdateItem.setText("Update");
        jButton_UpdateItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_UpdateItemActionPerformed(evt);
            }
        });
        jPanel2.add(jButton_UpdateItem, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 10, 70, 30));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Item Category:");
        jPanel2.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 160, -1, -1));
        jPanel2.add(jTextField_ItemAisle, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 160, 90, -1));

        jLabel17.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(255, 255, 255));
        jLabel17.setText("Item on Sale:");
        jPanel2.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 100, -1, -1));
        jPanel2.add(jTextField_NumOfItems, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 50, 70, 30));

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 40, 790, 240));

        jPanel3.setBackground(new java.awt.Color(204, 0, 204));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable_StoreTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Opening", "Closing", "Total Items"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable_StoreTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable_StoreTableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jTable_StoreTable);

        jPanel3.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 50, 390, 50));

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Item Availability:");
        jPanel3.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 80, -1, -1));

        jLabel15.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 255, 255));
        jLabel15.setText("Opening Hours:");
        jPanel3.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 20, -1, -1));

        jLabel16.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(255, 255, 255));
        jLabel16.setText("Closing Hours:");
        jPanel3.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 50, -1, -1));

        jButton_UpdateStore.setText("Update");
        jButton_UpdateStore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_UpdateStoreActionPerformed(evt);
            }
        });
        jPanel3.add(jButton_UpdateStore, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 110, 80, 40));

        jComboBox_ClosingHours.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "00:00", "01:00", "02:00", "03:00", "04:00", "05:00", "06:00", "07:00", "08:00", "09:00", "10:00", "11:00", "12:00", "13:00", "14:00", "15:00", "16:00", "17:00", "18:00", "19:00", "20:00", "21:00", "22:00", "23:00" }));
        jComboBox_ClosingHours.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_ClosingHoursActionPerformed(evt);
            }
        });
        jPanel3.add(jComboBox_ClosingHours, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 50, -1, -1));

        jComboBox_OpeningHours.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "00:00", "01:00", "02:00", "03:00", "04:00", "05:00", "06:00", "07:00", "08:00", "09:00", "10:00", "11:00", "12:00", "13:00", "14:00", "15:00", "16:00", "17:00", "18:00", "19:00", "20:00", "21:00", "22:00", "23:00" }));
        jComboBox_OpeningHours.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_OpeningHoursActionPerformed(evt);
            }
        });
        jPanel3.add(jComboBox_OpeningHours, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 20, -1, -1));
        jPanel3.add(jTextField_ItemAvailability, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 80, 170, -1));

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 280, 790, 160));

        jButton_Close.setBackground(new java.awt.Color(204, 0, 204));
        jButton_Close.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jButton_Close.setForeground(new java.awt.Color(255, 255, 255));
        jButton_Close.setText("Back");
        jButton_Close.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButton_CloseMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jButton_CloseMouseExited(evt);
            }
        });
        jButton_Close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_CloseActionPerformed(evt);
            }
        });
        jPanel1.add(jButton_Close, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 0, 90, 40));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTable_ItemsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable_ItemsTableMouseClicked
        DefaultTableModel itemModel = (DefaultTableModel)jTable_ItemsTable.getModel();

        //set data to textfield when selected
        
        //8 values on Items
        itemName = itemModel.getValueAt(jTable_ItemsTable.getSelectedRow(), 0).toString();
        ItemID = itemModel.getValueAt(jTable_ItemsTable.getSelectedRow(), 1).toString();
        String itemAvailability = itemModel.getValueAt(jTable_ItemsTable.getSelectedRow(), 2).toString();
        String size = itemModel.getValueAt(jTable_ItemsTable.getSelectedRow(), 3).toString();
        String price = itemModel.getValueAt(jTable_ItemsTable.getSelectedRow(), 4).toString();
        String description = itemModel.getValueAt(jTable_ItemsTable.getSelectedRow(), 5).toString();
        String category = itemModel.getValueAt(jTable_ItemsTable.getSelectedRow(), 6).toString();
        String aisle = itemModel.getValueAt(jTable_ItemsTable.getSelectedRow(), 7).toString();
        String sale = itemModel.getValueAt(jTable_ItemsTable.getSelectedRow(), 8).toString();
        
        jTextField_ItemName.setText(itemName); 
        jTextField_ItemID.setText(ItemID);
        jTextField_ItemCategory.setText(category);
        jTextField_ItemDescription.setText(description);
        jTextField_NumOfItems.setText(itemAvailability);
        jTextField_ItemSize.setText(size);
        jTextField_ItemPrice.setText(price);
        jTextField_ItemAisle.setText(aisle);
        jComboBox_SaleItem.setSelectedItem(sale);
    }//GEN-LAST:event_jTable_ItemsTableMouseClicked

    private void jTable_StoreTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable_StoreTableMouseClicked
        DefaultTableModel storeModel = (DefaultTableModel)jTable_StoreTable.getModel();

        //set data to textfield when selected
        String itemAvailability = storeModel.getValueAt(jTable_StoreTable.getSelectedRow(), 2).toString();
        String opening = storeModel.getValueAt(jTable_StoreTable.getSelectedRow(), 0).toString();
        String closing = storeModel.getValueAt(jTable_StoreTable.getSelectedRow(), 1).toString();

        jTextField_ItemAvailability.setText(itemAvailability);
        jComboBox_ClosingHours.setSelectedItem(opening);
        jComboBox_ClosingHours.setSelectedItem(closing);
    }//GEN-LAST:event_jTable_StoreTableMouseClicked

    private void jTextField_ItemPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField_ItemPriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField_ItemPriceActionPerformed

    private void jComboBox_ClosingHoursActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_ClosingHoursActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox_ClosingHoursActionPerformed

    private void jComboBox_OpeningHoursActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_OpeningHoursActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox_OpeningHoursActionPerformed

     private boolean checkItemValues(String itemName, String itemID) throws FileNotFoundException{        
        Scanner fileItem = new Scanner(itemsFile);
        
        boolean found = true; // added this variable

        if(itemsFile.length() == 0 || itemsFile.length() == 1){
            found = true;
        }else{
            while (fileItem.hasNextLine()) {
                found = true;
            
                String input = fileItem.nextLine();
                String[] itemValues = input.split(",");
                String nameItem = itemValues[1];
                String idItem = itemValues[2];
            
            if (itemName.equals(nameItem) && itemID.equals(idItem)) {
                    found = false;  
                } 
            }
        }
        return found;
    }
    
    private void addItem(String nameItem, String itemID, String itemDescription, String itemCategory, 
            String itemSize, String itemAisleNum, String itemPrice, String itemAvailability, String itemOnSale) throws IOException, Exception{
        try {     
            boolean validValues = checkItemValues(nameItem, itemID);
            
            if(validValues){
                   
                newItem = new Item(nameItem, itemID, itemDescription, itemSize, itemPrice, 
                itemAvailability, itemOnSale, itemCategory, itemAisleNum, storeID);
                
                Maintain_Items maintainItem = new Maintain_Items();
                
                //add user to login file.
                maintainItem.load(itemsPath);
                
                maintainItem.items.add(newItem);

                maintainItem.update(itemsPath); 
                
                JOptionPane.showMessageDialog(null, "Item Added!", "Item Added", JOptionPane.INFORMATION_MESSAGE);
                
                jComboBox_OpeningHours.setSelectedItem("None");
                jComboBox_ClosingHours.setSelectedItem("None");
                jTextField_ItemName.setText("");
                jTextField_ItemID.setText("");
                jTextField_ItemDescription.setText("");
                jTextField_ItemCategory.setText("");
                jTextField_ItemSize.setText("");
                jTextField_ItemAisle.setText("");
                jTextField_ItemPrice.setText("");
                jTextField_ItemAvailability.setText("");
                jComboBox_SaleItem.setSelectedItem("None");
            }
            else{
               JOptionPane.showMessageDialog(null, "Username Error. Try again.", "Error Message", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (FileNotFoundException ex) {
            //Logger.getLogger(notepad.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private boolean verifyItemFields(String nameItem, String itemID, String itemDescription, 
            String itemCategory, String itemSize,  String itemAisleNum, 
            String itemPrice, String itemAvailability, String itemOnSale){
        
        boolean valid = true;
        
        if(nameItem.trim().equals("") || itemID.trim().equals("") || itemDescription.trim().equals("")
                || itemSize.trim().equals("") || itemAisleNum.trim().equals("") 
                || itemPrice.trim().equals("") || itemAvailability.trim().equals("") 
                || itemOnSale.trim().equals("None") || itemCategory.trim().equals("")){
            JOptionPane.showMessageDialog(null, "One or more fields are empty", "Missing Fields", 2);
            valid = false;
        }
        return valid;
    }
    
    private void createItem(){
        
        String nameItem = jTextField_ItemName.getText();
        String itemID = jTextField_ItemID.getText();
        String itemDescription = jTextField_ItemDescription.getText();
        String itemCategory = jTextField_ItemCategory.getText();
        String itemSize = jTextField_ItemSize.getText();
        String itemAisleNum = jTextField_ItemAisle.getText();
        String itemPrice = jTextField_ItemPrice.getText();
        String itemAvailability = jTextField_NumOfItems.getText();
        String itemOnSale = jComboBox_SaleItem.getSelectedItem().toString(); //9
        
        
        if(verifyItemFields(nameItem, itemID, itemDescription, itemCategory, itemSize, itemAisleNum, itemPrice,
                itemAvailability, itemOnSale) == true){
            try {
                //Need added to excel file
                addItem(nameItem, itemID, itemDescription, itemCategory, 
                itemSize, itemAisleNum, itemPrice, itemAvailability, itemOnSale);
                updateItemsTable();
            } catch (Exception ex) {
                Logger.getLogger(Admin_Form.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
    private void updateItemsTable(){
        DefaultTableModel csvItemsData = new DefaultTableModel();
        
        if(itemsFile.length() == 0){
                csvItemsData.addColumn("Item Name");
                csvItemsData.addColumn("Item ID");
                csvItemsData.addColumn("# of Items");
                csvItemsData.addColumn("Size");
                csvItemsData.addColumn("Price");
                csvItemsData.addColumn("Description");
                csvItemsData.addColumn("Category");
                csvItemsData.addColumn("Aisle");
                csvItemsData.addColumn("Sale");
                csvItemsData.addColumn("Item Availability");
        }else{
            try {
                Scanner fileScan = new Scanner(itemsFile);
                
                int start = 0;
                
                while (fileScan.hasNextLine()) {
                    String input = fileScan.nextLine();
                    String[] itemValues = input.split(",");
                    
                    String nameItem = itemValues[0];
                    String itemID = itemValues[1];
                    String itemCategory = itemValues[2];
                    String itemAisle = itemValues[3];
                    String itemDescription = itemValues[4];
                    String itemSize = itemValues[5]; //Size
                    String itemPrice = itemValues[6]; //Price
                    String itemSale = itemValues[7]; //ItemOnSale
                    String itemAvailabilty = itemValues[8]; //Item Avaiability
                    
                    if(start == 0){
                        start = 1;
                        csvItemsData.addColumn("Item Name");
                        csvItemsData.addColumn("Item ID");
                        csvItemsData.addColumn("# of Items");
                        csvItemsData.addColumn("Size");
                        csvItemsData.addColumn("Price");
                        csvItemsData.addColumn("Description");
                        csvItemsData.addColumn("Category");
                        csvItemsData.addColumn("Aisle");
                        csvItemsData.addColumn("Sale");
                        csvItemsData.addColumn("Item Availability");
                    }
                    else{
                        Vector row = new Vector();
                        row.add(nameItem);
                        row.add(itemID);
                        row.add(itemAvailabilty);
                        row.add(itemSize);
                        row.add(itemPrice);
                        row.add(itemDescription);
                        row.add(itemCategory);
                        row.add(itemAisle);
                        row.add(itemSale);
                        row.add(itemAvailabilty);
                        csvItemsData.addRow(row);
                    }
                }
            } catch (FileNotFoundException ex) {
                Logger.getLogger(StoreMangement_Form.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        jTable_ItemsTable.setModel(csvItemsData);
    }
    
    private void deleteItem(){
        if(jTable_ItemsTable.getSelectedRowCount() == 1){
            try {
                int input = JOptionPane.showConfirmDialog(null,
                        "Are you sure you want to delete the Item?", "Deletion of Account",
                        JOptionPane.OK_CANCEL_OPTION, 2);
                
                Maintain_Items maintainItem = new Maintain_Items();
                maintainItem.load(itemsPath);    
                
                if (input == 0){
                    for(Item item: maintainItem.items){
                        if(item.getItemName().equals(itemName) && item.getItemID().equals(ItemID)){
                            maintainItem.items.remove(item);
                            break;
                        }
                    }
                      
                    JOptionPane.showMessageDialog(null, "Item Deleted", "Deleted", 2);
                    maintainItem.update(itemsPath);
                    
                    updateItemsTable();
                    updateStoreTable();
                }
            } catch (Exception ex) {
                Logger.getLogger(Admin_Form.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else{
            if(jTable_ItemsTable.getRowCount() == 0){
                 JOptionPane.showMessageDialog(null, "Table is Empty", "Empty Table", 2);
            }
            JOptionPane.showMessageDialog(null, "Select a Row to update.", "Updated", 2);
        }
    }
    
    private void jButton_AddItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_AddItemActionPerformed
        createItem();
    }//GEN-LAST:event_jButton_AddItemActionPerformed

    private void jButton_CloseMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton_CloseMouseEntered
        // set jbutton background
        jButton_Close.setBackground(new Color(0, 153, 153));
    }//GEN-LAST:event_jButton_CloseMouseEntered

    private void jButton_CloseMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton_CloseMouseExited
        // set jbutton background
        jButton_Close.setBackground(new Color(0, 204, 204));
    }//GEN-LAST:event_jButton_CloseMouseExited

    private void jButton_CloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_CloseActionPerformed
        if(userType.equals("Admin")){
            Admin_Form admin = new Admin_Form();
            admin.setVisible(true);
            admin.pack();
            setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
            this.dispose();   
        }else{
            Smart_Shoppers_System login = new Smart_Shoppers_System();
            login.setVisible(true);
            login.pack();
            login.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
            this.dispose();
        }
    }//GEN-LAST:event_jButton_CloseActionPerformed

    private void jTextField_ItemNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField_ItemNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField_ItemNameActionPerformed

    private void updateStoreTable() {
        try {
            DefaultTableModel csvData = new DefaultTableModel();
            
            Scanner fileScan = new Scanner(storesFile);
            
            int start = 0;
            
            while (fileScan.hasNextLine()) {
                String input = fileScan.nextLine();
                String[] userValues = input.split(",");
                String openingHours = userValues[4];
                String closingHours = userValues[5];
                String totalItems = userValues[6];

                if(start == 0){
                    start = 1;
                    csvData.addColumn("Opening");
                    csvData.addColumn("Closing");
                    csvData.addColumn("Total Items");
                }
                else{
                    Vector row = new Vector();
                    row.add(openingHours);
                    row.add(closingHours);
                    row.add(totalItems);
                    csvData.addRow(row);
                }
            }
            jTable_StoreTable.setModel(csvData);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Admin_Form.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    
    private void jButton_UpdateStoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_UpdateStoreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton_UpdateStoreActionPerformed

    private void jButton_DeleteItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_DeleteItemActionPerformed
        deleteItem();
    }//GEN-LAST:event_jButton_DeleteItemActionPerformed

    
    private void updateItem(){
        //set data to textfield when selected
        
        if(jTable_ItemsTable.getSelectedRowCount() == 1){
            try {
                int input = JOptionPane.showConfirmDialog(null,
                        "Are you sure you want to update the item?", "Updating Item",
                        JOptionPane.OK_CANCEL_OPTION, 2);
                
                Maintain_Items maintainItem = new Maintain_Items();
                maintainItem.load(itemsPath);    
                
                if (input == 0){
                    for(Item item: maintainItem.items){
                         if(item.getItemName().equals(itemName) && item.getItemID().equals(ItemID)){
                            String nameItem = jTextField_ItemName.getText();
                            String itemID = jTextField_ItemID.getText();
                            String itemDescription = jTextField_ItemDescription.getText();
                            String itemCategory = jTextField_ItemCategory.getText();
                            String itemSize = jTextField_ItemSize.getText();
                            String itemAisleNum = jTextField_ItemAisle.getText();
                            String itemPrice = jTextField_ItemPrice.getText();
                            String itemAvailability = jTextField_NumOfItems.getText();
                            String itemOnSale = jComboBox_SaleItem.getSelectedItem().toString(); //9
                            item.setItemName(nameItem);
                            item.setItemID(itemID);
                            item.setDescription(itemDescription);
                            item.setCategory(itemCategory);
                            item.setSize(itemSize);
                            item.setAisleNum(itemAisleNum);
                            item.setPrice(itemPrice);
                            item.setItemOnSale(itemOnSale);
                            item.setItemAvailability(itemAvailability);
                            break;
                        }
                    }
                    JOptionPane.showMessageDialog(null, "Item Updated", "Updated", 2);
                    maintainItem.update(itemsPath);
                }
                updateItemsTable();
            } catch (Exception ex) {
                Logger.getLogger(Admin_Form.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else{
            if(jTable_ItemsTable.getRowCount() == 0){
                 JOptionPane.showMessageDialog(null, "Table is Empty", "Empty Table", 2);
            }
            JOptionPane.showMessageDialog(null, "Select a Row to update.", "Updated", 2);
        }
    }
    
    private void jButton_UpdateItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_UpdateItemActionPerformed
        updateItem();
    }//GEN-LAST:event_jButton_UpdateItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StoreMangement_Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StoreMangement_Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StoreMangement_Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StoreMangement_Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new StoreMangement_Form().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_AddItem;
    private javax.swing.JButton jButton_Close;
    private javax.swing.JButton jButton_DeleteItem;
    private javax.swing.JButton jButton_UpdateItem;
    private javax.swing.JButton jButton_UpdateStore;
    private javax.swing.JComboBox<String> jComboBox_ClosingHours;
    private javax.swing.JComboBox<String> jComboBox_OpeningHours;
    private javax.swing.JComboBox<String> jComboBox_SaleItem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable_ItemsTable;
    private javax.swing.JTable jTable_StoreTable;
    private javax.swing.JTextField jTextField_ItemAisle;
    private javax.swing.JTextField jTextField_ItemAvailability;
    private javax.swing.JTextField jTextField_ItemCategory;
    private javax.swing.JTextField jTextField_ItemDescription;
    private javax.swing.JTextField jTextField_ItemID;
    private javax.swing.JTextField jTextField_ItemName;
    private javax.swing.JTextField jTextField_ItemPrice;
    private javax.swing.JTextField jTextField_ItemSize;
    private javax.swing.JTextField jTextField_NumOfItems;
    private javax.swing.JLabel storeLabel;
    // End of variables declaration//GEN-END:variables

}
